State in React Apps

The more I work on projects in react the more its becoming clear that you really need to treat your state as a first class concern in your app. It's also becoming more apparent that full stack skills are going to help teams harness the full power of react.

Treating state as first class means giving it the same attention you would to any other code in your app. When I first started, I didn't fully appreciate the subtle but profound ways that state colors your app. What should be included? How should it be modeled? What does the app need to explicitly know and what can be inferred from other values. The more projects I work on, the more state seems like *the* focus of the app rather than the view. The view simply *reacts* to the state.

Full stack skills help you think more clearly about state and how it might be best structured for the app. It's easy to miss this when you're looking at tutorials that tend to focus on creating the UI. Really its the data that informs the UI. This became clear when I wanted to build a product page for an e-commerce site.

My first attempt at modeling the data:

var state ={
	productName : 'Cotton Cable Cardigan',
	featureImage: ['img1.jpg', 'img2.jpg', 'img3.jpg'],
	price: 128.00,
	productNumber:'f9886',
	colors:[
		{ color : 'heather ivory', 
		  productImage:'product1.jpg',
		  sizes : [ { size : 'x-small' , status: true  , hover : 'in-stock'      }, 
		  			{ size : 'small'   , status: true  , hover : 'in-stock'      }, 
		  			{ size : 'medium'  , status: false , hover : 'out-of-stock'  },
		  			{ size : 'large'   , status: false , hover : 'out-of-stock'  }, 
		  			{ size : 'x-large' , status: true  , hover : 'in-stock'      }
	  			]
		},
		{ color : 'deep navy', 
		  productImage:'product1.jpg',
		   sizes : [{ size : 'x-small' , status : false , hover : 'out-of-stock' }, 
		  			{ size : 'small'   , status : false , hover : 'out-of-stock' }, 
		  			{ size : 'medium'  , status : false , hover : 'out-of-stock' },
		  			{ size : 'large'   , status : false , hover : 'out-of-stock' }, 
		  			{ size : 'x-large' , status : true  , hover : 'in-stock'     }
		  		   ]
		}
	]
}

Not so bad until I wanted to add a shopping cart widget which would keep a total and list of all products added to the cart. 

My first thought was to just add the shopping carts properties to the state:

var state={
	productData:{...},
	cartData:{...}
}

But this smelled funny. 

For one I felt like my state was getting unweildly and overly complex. productData already contained nested arrays and objects, and cartData would also require a complex structure to represent.

var cartData = {
	items:[{
		color:'',
		productNumber:'',
		quantity:0,
		size:''
	}],
	total:0
}

My cart could contain multiple product Objects stored in an array

But this didn't feel right either. I felt like i was going to repeat myself a ton. Also the logic of how to remove an item from the cart, or selectively apply a promotion (what happens when a red sweater is on sale but the black sweater is still full price?).

This was getting out of control fast.

In databases, the concept of a unique id helps us manage data and its relationships to other sets of data. Instead of storing all my information in one spot I can use a unique id to store references to other sets of data.







Exposure to databases can help you think about the relationships your data has to each other.





My mistake was in modeling the data as close to a server API response as possible. A given product, represented as an object,  might have a number of number of associated individual configurations.



